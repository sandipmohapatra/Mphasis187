Java
------------
1)Java support Object oriented program.
2)Java is a high level language.It is portable.It is case sensitive.
3)Java is simpler than c and c++ as we don't have pointer concept.
4)In java we have constructor but no destructor.there is Automatic garbage
clearance.
5)With java we can develop standalone application,web application,
network application and mobile application.
6)Java is platform independent.we can run java on any operating system.
7)we have to save the java program with .java extention .after compilation .class
file is created.
-------------------------------------------------------
Data types
------------------
1)primary datatype
a) byte -1 byte 
b)short - 2 bytes
c)int - 4 bytes
d)long - 8 bytes
e)float - 4 bytes
f)double - 8 bytes
g)boolen -1 bit
h)char - 2 bytes
------------------------------------
2)secondary datatype
a)String
b)array
--------------------------------------------------------------------------------
Operator
-------------
1)Unary
i)i++,i--,--i,++i
2)Binary
i)Arithmatic :- +,-,*,/,%
ii)Comparative :- <,>,<=,>=,==,!=
iii)assignment :- =,!=
iv)bitwise :- <<,>>,nor
v)logical :-&&,|| 
3)Ternary
i)?,:
---------------------------------------------------------------------
In java all data types are also classes.They are known as wrapper classes. 
----------------------
1)byte - Byte
2)short - Short
3)int - Integer
4)long - Long
5)float - Float
6)double - Double
7)char - Character
8)String

The wrapper classes belong to lang package.
--------------------------------------------------------------------------------------
javap java.lang.Integer
---------------------------------
In Hirarchy first package ---->class ---->methods
---------------------------------------------------------------------------
Access specifier(Access permission)
-----------------------------
we can declare a variable as private,public,protected,default.
----------------------------------------------------------------------------------
private int a;
----------------------------------
1)private :- if we declare a variable as private we can access it within the class only.
2)public :-if we declare a variable as public we can access it within the class ,out the class,out side the package also.
3)protected:- if we declare a variable as protected we can access it within the class and within a child class.
4)default:- if we declare a variable as default we can access it within the class ,out the class,but not out side the package.
----------------------------------------------------------------
class and object
=======================
A class is a collection of variables and methods.
A class is also called as object factory.
----------
an object is a reference pointer to the class.
we can access variables and methods of a class using object
---------------------------------------------------------

example1:-
-------------------
package com.Mphasis;
import java.util.*;
public class First 
{
int rollno;
String name,address;
void getData()
{
	Scanner x=new Scanner(System.in);
	System.out.println("enter rollno,name,address");
	rollno=x.nextInt();
	name=x.next();
	address=x.next();
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
First ayush=new First();
ayush.getData();
System.out.println(ayush.address);
ayush.display();
}
}


--------------------------------------------------------------------------------------


wap to enter details of a employee and display it.

empno
name
address
salary
designation
using class and object
-------------------------------------------------------------------------
(is-a relationship)Inheritance :- Java support single inheritance.It is use to reuse the existing code.
i)single inheritance
ii)multi-level inheritance
iii)Hirarchal inheritance
---------------
java does not support multiple inheritance and hybrid inheritance.(combination of diff types of inheritance)
we use the keyword super and extends.
super is used to  inherite parent class variables and methods into the child class.
extends is used to inherite parent class into the child class.

we create object for the child class.
----------------------------------------------------
*For multiple inheritance we use Interface.
-----------------------------------------------------------------------------------
example-1
--------------------
package com.mphasis3rdApril;
import java.util.*;
public class Employeedetails
{
int empid;
String name,address;
void getData()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empid,name,address");
	empid=ob.nextInt();
	name=ob.next();
	address=ob.next();
	}
void display()
{
	System.out.println("the empid is "+empid);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
---------------------------------------------------------
package com.mphasis3rdApril;
import java.util.Scanner;
public class employeepersonal extends Employeedetails //to extend the parent class
{
	String phoneno,email;
	void getData1() //void means there will be no return
	{
		super.getData();//inherite the super class method
		Scanner ob=new Scanner(System.in);
System.out.println("enter phoneno and email");
phoneno=ob.next();
email=ob.next();
	}
void display1()
{
	super.display();//inherite the super class method
	System.out.println("the phone no is "+phoneno);
	System.out.println("the email is "+email);
	}
public static void main(String[] args) 
{
	employeepersonal obj=new employeepersonal();//class,object ,new to create memory block,constructor
	obj.getData1();
	obj.display1();
}
}
---------------------------------------------------------------
wap to take 2 classes

persondetails
name,address,phoneno

bankdetails extends persondetails
accno,balance

and display the full details.
--------------------------------------------------------------- 
example-2
------------------
package com.mphasis3rdApril;
import java.util.*;
class Employeedetails
{
String empid;
String name,address;
void getData()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empid,name,address");
	empid=ob.nextLine();
	name=ob.nextLine();
	address=ob.nextLine();
	}
void display()
{
	System.out.println("the empid is "+empid);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}

public class employeepersonal extends Employeedetails //to extend the parent class
{
	String phoneno,email;
	void getData1() //void means there will be no return
	{
		getData();//inherite the super class method
		Scanner ob=new Scanner(System.in);
System.out.println("enter phoneno and email");
phoneno=ob.next();
email=ob.next();
	}
void display1()
{
	display();//inherite the super class method
	System.out.println("the phone no is "+phoneno);
	System.out.println("the email is "+email);
	}
public static void main(String[] args) 
{
	employeepersonal[] obj=new employeepersonal[2];//class,object ,new to create memory block,constructor
	for(int i=0;i<2;i++)
	{
	obj[i]=new employeepersonal();	//indivisually memory blocks are created
	obj[i].getData1();
	}
	for(int i=0;i<2;i++)
	{
	obj[i].display1();
	}
}
}
-------------------------------------------
wap to create a parent class and 2 child classes.

parent class is student :- name,address

child class is PCMmarks:-phy,chem,maths,total

child class is CBZmarks:-chem,bot,zol,total
 ------------------------------------------------------------------
example-3
------------------------
package com.mphasis3rdApril;
import java.util.*;
public class Student 
{
int rollno;
String name,address;
void getdata()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("rollno is "+rollno +" name is "+name+" address is "+address);
}
}
------------------------------------
package com.mphasis3rdApril;

import java.util.Scanner;

public class PCMmarks extends Student{
	int phy,chem,math,total;
	void getdata()
	{
		super.getdata();
		Scanner ob=new Scanner(System.in);
		System.out.println("enter phy,chem,math");
		phy=ob.nextInt();
		chem=ob.nextInt();
		math=ob.nextInt();
		total =phy+chem+math;
	}
	void display()
	{
		super.display();
		System.out.println("Phy marks is "+phy +" Chem marks is "+chem+" math is "+math);
		System.out.println("total is "+total);
	}
	}


--------------------------------------------
package com.mphasis3rdApril;

import java.util.Scanner;

public class CBZmarks extends Student
{
	int che,bio,zol,total;
	void getdata()
	{
		super.getdata();
		Scanner ob=new Scanner(System.in);
		System.out.println("enter chem,bio,zol");
		che=ob.nextInt();
		bio=ob.nextInt();
		zol=ob.nextInt();
		total =che+bio+zol;
	}
	void display()
	{
		super.display();
		System.out.println("Chem marks is "+che +" Bio marks is "+bio+" Zol is "+zol);
		System.out.println("total is "+total);
	}
}
--------------------------------------------
package com.mphasis3rdApril;
import java.util.*;
public class Result 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);
System.out.println("which stream details want to enter(PCM /CBZ)");
String stream=ob.next();
if(stream.equals("PCM"))
{
	PCMmarks obj=new PCMmarks();
	obj.getdata();obj.display();
}
else
{
	CBZmarks obj=new CBZmarks();
	obj.getdata();obj.display();
}
}
}
--------------------------------------------------
assignment

create a bank class
accno,name,phone no,balance
create deposite class
accno,deposite amt,total amount
create withdraw class
accno,withdraw amt,total amount
minimum balance =500
------------------------------------------------------------------
Constructor:-  
1)A constructor is a function which has the same name as the class name.
2)It does not return any value nor it has any return type.
3)There are 2 types of constructor 
i)default constructor without any parameter.
ii)parameterized constructor with parameter.
4)A constructor execute first when a object is created for a class.
5)custructor are used to assign values.
6)A constructor execute automatically when an object is created for the class.
we call a function but constructors are automatically called when object is created of the class.
--------------------------------------------------------------------------------
package com.mphasis3rdApril;

public class ConstructorExample 
{
	ConstructorExample()
	{
		System.out.println("default constructor");
	}
	ConstructorExample(int a,int b)
	{
		System.out.println("the sum is "+(a+b));
	}
	int sum(int a,int b)//funaction can have any name 
	{
		return a+b;
	}
	public static void main(String[] args) {
		    ConstructorExample obj=new ConstructorExample();
		    ConstructorExample obj1=new ConstructorExample(6,7);
		    //to call a method we can use any of the object
		    System.out.println("the sum is "+obj.sum(9,10));
	}
}
-------------------------------------------------------------------------------------
example -5
-------------------
package com.mphasis3rdApril;
import java.util.*;
class Constexample 
{
int empno;//class variable can be accessed through out the class
String name,address;
Constexample(int eno,String name,String address)//local variable only for method access
{
	empno=eno;//this is a self referencial pointer to distinguish between class variable and local variable.
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
public class Constexample1 extends Constexample
{
double salary;
String design;
	Constexample1(int eno, String name, String address,double salary,String design) 
	{
		super(eno, name, address);//this is first statement to execute first the super class constructor will execute
		this.salary=salary;
		this.design=design;
		
				}
	void display()
	{
		super.display();
		System.out.println("the salary is "+salary);
		System.out.println("the designation is "+design);
	}
	public static void main(String[] args) 
	{
		Scanner y=new Scanner(System.in);
		System.out.println("enter empno,name,address,salary,designation");
		int a=y.nextInt();
		String b=y.next();
		String c=y.next();
		double d=y.nextDouble();
		String e=y.next();
		Constexample1 x=new Constexample1(a,b,c,d,e);
		x.display();
		//1.constructor has the same name as that of the class name.
		//2.we have to create object for the child class so the child class constructor will execute.
	}
}
------------------------------------------------
create a super class students (rollno,name,section)
create a child class marks(phy,chem,maths,total)
display the result .it should be dynamic.using constructor.
---------------------------------------------------------------------------------
inheritance
------------------------------
Encapsulation :-
It is also known as data hiding.we can make the variables as private so that other class 
will not be able to access them.This is to protect the data.
It is the process of wrapping code and data together into a single unit.

example student :-
data :- private rollno,name,address
code :- getdata(),setdata();
we can make accessable by using it within the public methods.
--------------------------------------------------
abstraction:- to hide the complexcity and show the simplecity.
example :- switch on the fan.
------------------------------------
polymerphisim:- 
function overloading(compile time)
function over riding(run time )
-----------------------------------------------------------
example-1
package com.mphasis3rdApril;

public class EncapsulationEx 
{
private int empno;
private String name,address;
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
}
---------------------------------------------------
package com.mphasis3rdApril;

public class Test 
{
public static void main(String[] args) {
	EncapsulationEx ob=new EncapsulationEx();
	ob.setEmpno(101);
	ob.setName("Anil");
	ob.setAddress("Hydrabad");
	System.out.println("the empno is "+ob.getEmpno());
	System.out.println("the name is "+ob.getName());
	System.out.println("the address is "+ob.getAddress());
}
}
--------------------------------------------------------------
example-2
package com.mphasis3rdApril;

public class EncapsulationEx 
{
private int empno;
private String name,address;
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
 EncapsulationEx(int empno, String name, String address) {
	this.empno = empno;
	this.name = name;
	this.address = address;
	System.out.println("the empno is "+empno+" the name is "+name+"  the address is "+address);
}}
--------------------------------------------------------
package com.mphasis3rdApril;

public class Test 
{
public static void main(String[] args) {
	EncapsulationEx ob=new EncapsulationEx(102,"sandip","Banglore");
	ob.setEmpno(101);
	ob.setName("Anil");
	ob.setAddress("Hydrabad");
	System.out.println("the empno is "+ob.getEmpno());
	System.out.println("the name is "+ob.getName());
	System.out.println("the address is "+ob.getAddress());
}
}
-------------------------------------------------------------------------------------------
example-3
----------------------
package com.mphasis3rdApril;

public class EncapsulationEx 
{
private int empno;
private String name,address;
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
 EncapsulationEx(int empno, String name, String address) {
	this.empno = empno;
	this.name = name;
	this.address = address;
	System.out.println("the empno is "+empno+" the name is "+name+"  the address is "+address);
}
public String toString() //This will convert object to string  
{
	return "EncapsulationEx [empno=" + empno + ", name=" + name + ", address=" + address + "]";
}
}
------------------------------------------------------------------------
package com.mphasis3rdApril;

public class Test 
{
public static void main(String[] args) {
	EncapsulationEx ob=new EncapsulationEx(102,"sandip","Banglore");
	System.out.println(ob);
	ob.setEmpno(101);
	ob.setName("Anil");
	ob.setAddress("Hydrabad");
	System.out.println("the empno is "+ob.getEmpno());
	System.out.println("the name is "+ob.getName());
	System.out.println("the address is "+ob.getAddress());
	System.out.println(ob);
}
}
-------------------------------------------------------------

wap to enter data of a library and display it.

issueDate,name,author,price.
i)use getter,setter to set and get data
ii)use contructor to set and get data
iii)use toString() to print the object
----------------------------------------------------------------

is-a relationship (Inheritance)
-------------------------------------------------------
has-a relationship (agregation)
example:- house has a kitchen
employee has an address.
---------------------------------------------------------------
Example 1
------------------
package com.Mphasis;
public class Employee
{
private int empno;
private String name;
private Address address;
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public Address getAddress() {
	return address;
}
public void setAddress(Address address) {
	this.address = address;
}
public Employee(int empno, String name, Address address) 
{
	super();
	this.empno = empno;
	this.name = name;
	this.address = address;
}}
-------------------------------------------------------------------
package com.Mphasis;

public class Address 
{
private int roadno;
private String Streetname,city,state;
public int getRoadno() {
	return roadno;
}
public void setRoadno(int roadno) {
	this.roadno = roadno;
}
public String getStreetname() {
	return Streetname;
}
public void setStreetname(String streetname) {
	Streetname = streetname;
}
public String getCity() {
	return city;
}
public void setCity(String city) {
	this.city = city;
}
public String getState() {
	return state;
}
public void setState(String state) {
	this.state = state;
}

public String toString() {
	return "Address [roadno=" + roadno + ", Streetname=" + Streetname + ", city=" + city + ", state=" + state + "]";
}
public Address(int roadno, String streetname, String city, String state) {
	super();
	this.roadno = roadno;
	Streetname = streetname;
	this.city = city;
	this.state = state;
}}
---------------------------------------------------------
package com.Mphasis;

public class Test 
{
public static void main(String[] args) {
		
Address ob=new Address(10, "MG Road", "Bangalore", "Karnataka");

Employee obj=new Employee(101, "sandip", ob);
System.out.println("the employee no is "+obj.getEmpno());
System.out.println("the name no is "+obj.getName());
System.out.println("the  address is "+obj.getAddress());
}
}
----------------------------------------------------------------------
wap to display person has a bank account
person(name,address,bank)
Bank(accno,balance)
display the details
---------------------------------------
Abstract :- 
we can declare a class as abstract.
we can declare a method as abstract.
An abstract class is a class which is incomplete.we cannot create object of an abstract class.
An abstract class contains abstracts methods as well as concrete methods.
we have to inherit the abstract class into a class override the abstract methods and 
create object for the child class.
we can have default constructor for abstract class.
--------------------------------------------------------------------
example-1
-----------------
package com.Mphasis;
abstract class bank
{
	abstract void getPersonData();
	abstract void applyLoan();
	abstract void applycard();
	void displayName() //concrete method
	{
		System.out.println("ICICI BANK");
	}
}
public class Details extends bank
{

	@Override
	void getPersonData() 
	{
		System.out.println("getPersonData");
	}

	@Override
	void applyLoan() {
		System.out.println("apply loan");
		
	}

	@Override
	void applycard() {
	System.out.println("apply card");	
		
	}

	public static void main(String[] args) 
{
		Details ob=new Details();
		ob.displayName();
		ob.applycard();
		ob.applyLoan();
		ob.getPersonData();
	}
	
}
--------------------------------------------------------------------------
example 2
----------------
package com.Mphasis;

abstract class DBCrud
{
abstract void createTable();
abstract void readData();
abstract void updateData();
abstract void deleteData();
void connection() {
	System.out.println("conection created using username,password");
}
}
class Abstractex2 extends DBCrud
{

	@Override
	void createTable() {
		
		System.out.println("Table created");
	}

	@Override
	void readData() {
	
		System.out.println("Data reading from DB");
	}

	@Override
	void updateData() {
		
		System.out.println("update data");
	}

	@Override
	void deleteData() {
		System.out.println("Delete Data");
	}
	public static void main(String[] args) {
		Abstractex2 ob=new Abstractex2();
		ob.connection();
		ob.createTable();
		ob.readData();
		ob.updateData();
		ob.deleteData();
	}
}
-------------------------------------------------------------------
Interface :-
we can declare a class as interface.
It only contains abstract methods.we donot use the keyword abstract.
while overriding the methods we have to use public access specifier. 
An Interface is incomplete class.we cannot create object of an interface.
By interface we can perform multiple Inheritance .
java doesnot support multiple Inheritance but by interface we can perform multiple inheritance.
we have to implement an interface into a child class and create object of the child class.
-------------------------------------
package com.Mphasis;

interface Interface1 
{
void connection();
}
interface Interface2
{
	void createTable();
}
interface Interface3
{
	void Insertdata();
	void UpdateData();
	void deleteData();
}
class Interfaceex1 implements Interface1,Interface2,Interface3
{

	@Override
	public void Insertdata() {
		
		System.out.println("Insert data");
	}

	@Override
	public void createTable() {
		
		System.out.println("create table");
	}

	@Override
	public void connection() {
	
	System.out.println("create connection");	
	}

	@Override
	public void UpdateData() {
		 
		System.out.println("update data");		
	}

	@Override
	public void deleteData() {
		 
		System.out.println("delete data");	
	}
	public static void main(String[] args) {
		Interfaceex1 ob=new Interfaceex1();
		ob.connection();
		ob.createTable();
		ob.deleteData();
		ob.Insertdata();
		ob.UpdateData();
	}
}

---------------------------------
example 2
------------------------
package com.Mphasis;

interface Interface1 
{
void connection();
}
interface Interface2
{
	void createTable();
}
interface Interface3 extends Interface2
{
	void Insertdata();
	void UpdateData();
	void deleteData();
}
class Interfaceex1 implements Interface1,Interface3
{

	@Override
	public void Insertdata() {
		
		System.out.println("Insert data");
	}

	@Override
	public void createTable() {
		
		System.out.println("create table");
	}

	@Override
	public void connection() {
	
	System.out.println("create connection");	
	}

	@Override
	public void UpdateData() {
		 
		System.out.println("update data");		
	}

	@Override
	public void deleteData() {
		 
		System.out.println("delete data");	
	}
	public static void main(String[] args) {
		Interfaceex1 ob=new Interfaceex1();
		ob.connection();
		ob.createTable();
		ob.deleteData();
		ob.Insertdata();
		ob.UpdateData();
	}
}
----------------------------------------------
example-3
package com.Mphasis;

interface Interface1 
{
	public static final int a = 10;//final value cannot be changed
	//static variable is which a single copy is created by the JVM and we can access it without object
	void connection();
}
interface Interface2
{
	void createTable();
}
interface Interface3 extends Interface2
{
	void Insertdata();
	void UpdateData();
	void deleteData();
}
class Interfaceex1 implements Interface1,Interface3
{

	@Override
	public void Insertdata() {
		
		System.out.println("Insert data");
	}

	@Override
	public void createTable() {
		
		System.out.println("create table");
	}

	@Override
	public void connection() {
	
	System.out.println("create connection");	
	}

	@Override
	public void UpdateData() {
		 
		System.out.println("update data");		
	}

	@Override
	public void deleteData() {
		 
		System.out.println("delete data");	
	}
	public static void main(String[] args) {
		Interfaceex1 ob=new Interfaceex1();
		System.out.println(a);
		ob.connection();
		ob.createTable();
		ob.deleteData();
		ob.Insertdata();
		ob.UpdateData();
	}
}
--------------------------------------------
wap to create an application for a college.

abstract class College
{
abstract getRegistration();
abstarct getAttendence();
abstract getExamined();
abstract getResult();
}
class xyz extends College
{}
--------------------------------------------------
convert this into Interface also
---------------------------------------------------------------------------------------------------
static keyword
-------------------------------------------
1)we can declare a class as static.Variable as static.method as static and we can have static block.
2)when we declare as static a single copy is send to the JVM.
3)we can access it without creating an object.
4)static variables and methods can be called using class name.
5)we cannot access non-static variables inside a static method.
---------------------------------------------------
package com.Mphasis;
public class Staticex 
{
static int a=10;
static int b=20;
static void display()
{
	int c=a+b;//we cannot access non-static variables inside a static method.
	System.out.println(c);
	System.out.println("This is display");
}
static
{
	System.out.println("This is static block");
}
public static void main(String[] args) 
{
	System.out.println(Staticex.a);
	Staticex.display();
	}
}

----------------------------------------------------------------------------------------






































